1. Write a program that reads characters from the keyboard until a period is received. Have the
program count the number of spaces. Report the total at the end of the program.

class Period {
    public static void main(String args[])
        throws java.io.IOException {


        char input;
        int counter = 0;

        input= (char) System.in.read();

        while(input != '.') {
            input = (char) System.in.read();
            if(input  == ' ') counter++;
            if(input == '.') {
                System.out.println("Correct! Spaces counted:" + counter);
                break;
            }
        }
    }
}


2. Show the general form of the if-else-if ladder.

if(statement)
else if(statement)
...
else(statement);

3. Given

       if(x < 10)
         if(y > 100) {
           if(!done) x = z;
else y = z; }
       else System.out.println("error"); // what if?

to what if does the last else associate?

The last else associates with the second 'if' (y > 100)

4. Show the for statement for a loop that counts from 1000 to 0 by â€“2.

for(i=1000,i>=0, i-=2); 

5. Is the following fragment valid?
       for(int i = 0; i < num; i++)
         sum += i;
count = i;

No, because there are no curly brackets to signify a block and there is more than one command in the for loop.

6. Explain what break does. Be sure to explain both of its forms.

Break exits a loop and starts executing code outside the loop it was in.. A labelled break specifically exits the loop specified in the label.

7. In the following fragment, after the break statement executes, what is displayed?
       for(i = 0; i < 10; i++) {
         while(running) {
           if(x<y) break;
            // ...
}
         System.out.println("after while");
       }
       System.out.println("After for");

"After while"

8. What does the following fragment print?
       for(int i = 0; i<10; i++) {
         System.out.print(i + " ");
         if((i%2) == 0) continue;
         System.out.println();
}

1 3 5 7 9


9. The iteration expression in a for loop need not always alter the loop control variable by a fixed amount. Instead, the loop control variable can change in any arbitrary way. Using this concept, write a program that uses a for loop to generate and display the progression 1, 2, 4, 8, 16, 32, and so on.

class Arbitrary {
    public static void main(String args[])
        throws java.io.IOException {

        int i = 2;

        for(i=2; i <= 1000; i *= 2) {
            System.out.println(i + " ");
        }
    }
}


10. The ASCII lowercase letters are separated from the uppercase letters by 32. Thus, to convert a lowercase letter to uppercase, subtract 32 from it. Use this information to write a program that reads characters from the keyboard. Have it convert all lowercase letters to uppercase, and all uppercase letters to lowercase, displaying the result. Make no changes to any other character. Have the program stop when the user enters a period. At the end, have the program display the number of case changes that have taken place.

class Ascii {
    public static void main(String args[])
        throws java.io.IOException {
        char input = (char) System.in.read();
        char changed;
        int changes;
        changes = 0;


        System.out.println(" Hit '.' to end");


        do {
            input = (char) System.in.read();

            if(input >= 'a' & input <='z') {
                changed = input -= 32;
                changes ++ ;

                System.out.print(changed);
            }
            else if(input >= 'A' & input <='Z') {
                changed = input += 32;
                changes ++ ;
                System.out.print(changed);
            }

        } while(input != '.');
        System.out.println("Case changes: " + changes);
    }
}

11. What is an infinite loop?

A loop that goes on forever...? EG loops that keep computers running.

12. When using break with a label, must the label be on a block that contains the break?

Yes, it must be.
